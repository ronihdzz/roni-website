{
    "personal": {
      "name": "Roni Hernández",
      "profession": "Squad-Leader Back-end Developer",
      "title_parts": [
        "Hello,",
        "I’m Roni Hernández,",
        "Squad-Leader Back-end Developer"
      ],
      "about": "I’m a back-end developer with more than three years of experience in the tech industry, especially in start-ups. I currently work at Fairplay, a fintech start-up where I began maintaining the company monolith, which allowed me to understand the inherited systems in depth. Later, I was assigned to the core-banking project, where, together with other engineers, we built the system from scratch, tackling challenges of efficiency, scalability, and system configuration.\n\nOne of the things I’m most passionate about in core banking is tangibly seeing how the code I write directly impacts revenue, money transfers, and payment orders. It’s thrilling to observe how my technological solutions move large sums of money, giving every project—and every line of code—a unique relevance.\n\nI’ve also had the opportunity to collaborate with Data Engineering, Data Science, Cybersecurity, Product, Sales, and DevOps, giving me a holistic vision of how different areas interrelate inside a tech company. This interaction lets me deliver solutions better aligned to the company’s overall needs.\n\nBefore joining Fairplay, I worked at Telmex in the Cybersecurity division. Although I have always been interested in infosec and networking, at that point in my career I felt the need to *push more code* and deepen my back-end knowledge. I therefore sought a more dynamic, development-oriented experience—and what better place than a start-up, where technical challenges are continuous and varied.\n\nMy tech stack includes extensive experience with Linux, networks, and AWS services (Lambda, S3, SQS, SNS, Step Functions, CloudWatch, IAM), plus deployment and automation tools such as Docker, Docker Compose, and GitHub Actions. I mainly code in Python, C, C++, and Java, and I’ve built APIs and microservices with Django REST Framework, FastAPI, and Flask. I’m also experienced with PostgreSQL and Redis.\n\nAlthough I’m not currently leading a team, I have supervised people in the past, which helped me develop leadership and management skills. My approach has always been to work closely with teammates to achieve efficient and scalable results.\n\nMy current interests include software architecture and integrating artificial intelligence in innovative solutions, exploring technologies such as TensorFlow and LangChain. I’m always looking for new challenges and learning opportunities.",
      "photo": "static/roni.jpg",
      "cv": {
        "spanish": "/static/cv.pdf",
        "english": "/static/cv_en.pdf"
      }
    },
    "social_links": {
      "linkedin": "https://www.linkedin.com/in/ronihdz/",
      "github": "https://github.com/ronihdzz",
      "youtube": "https://www.youtube.com/@ronihdzz",
      "medium": "https://ronihdz.medium.com/",
      "devto": "https://dev.to/ronihdz"
    },
    "contact": {
      "email": "ronihdzbel@gmail.com",
      "phone": "+52 55 13086150",
      "location": "Mexico City, Mexico",
      "available_for_work": true,
      "preferred_contact": "email",
      "form": {
        "title": "Send me a message",
        "subtitle": "Got a project in mind? I’d love to hear about it!",
        "fields": [
          {
            "name": "name",
            "type": "text",
            "placeholder": "Your name",
            "required": true
          },
          {
            "name": "email",
            "type": "email",
            "placeholder": "Your email",
            "required": true
          },
          {
            "name": "subject",
            "type": "text",
            "placeholder": "Subject",
            "required": true
          },
          {
            "name": "message",
            "type": "textarea",
            "placeholder": "Your message",
            "required": true,
            "rows": 5
          }
        ],
        "submit_text": "Send message",
        "action": "/contact",
        "method": "post"
      }
    },
    "skills": {
      "featured": ["Python", "FastAPI", "AWS", "LangChain", "GitHub Actions", "PostgreSQL"],
      "categories": {
        "Programming Languages": [
          {
            "name": "Python",
            "level": "Advanced",
            "years": 5,
            "icon": "fab fa-python"
          },
          {
            "name": "C",
            "level": "Intermediate",
            "years": 3,
            "icon": "fas fa-code"
          },
          {
            "name": "C++",
            "level": "Intermediate",
            "years": 2,
            "icon": "fas fa-code"
          },
          {
            "name": "Go",
            "level": "Basic",
            "years": 0,
            "icon": "fas fa-gopher"
          }
        ],
        "Frameworks & Libraries": [
          {
            "name": "FastAPI",
            "level": "Advanced",
            "years": 3,
            "icon": "fas fa-bolt"
          },
          {
            "name": "Django",
            "level": "Advanced",
            "years": 3,
            "icon": "fab fa-python"
          },
          {
            "name": "Django REST Framework",
            "level": "Advanced",
            "years": 3,
            "icon": "fab fa-python"
          },
          {
            "name": "Flask",
            "level": "Intermediate",
            "years": 2,
            "icon": "fab fa-python"
          },
          {
            "name": "PyQt5",
            "level": "Intermediate",
            "years": 1,
            "icon": "fab fa-python"
          }
        ],
        "AI & Machine Learning": [
          {
            "name": "pandas",
            "level": "Intermediate",
            "years": 2,
            "icon": "fas fa-database"
          },
          {
            "name": "numpy",
            "level": "Intermediate",
            "years": 2,
            "icon": "fas fa-database"
          },
          {
            "name": "matplotlib",
            "level": "Intermediate",
            "years": 2,
            "icon": "fas fa-chart-line"
          },
          {
            "name": "scikit-learn",
            "level": "Intermediate",
            "years": 2,
            "icon": "fas fa-chart-line"
          },
          {
            "name": "TensorFlow",
            "level": "Intermediate",
            "years": 2,
            "icon": "fas fa-chart-line"
          },
          {
            "name": "LangChain",
            "level": "Intermediate",
            "years": 2,
            "icon": "fas fa-chart-line"
          }
        ],
        "Protocols & Tools": [
          {
            "name": "gRPC",
            "level": "Advanced",
            "years": 2,
            "icon": "fas fa-network-wired"
          },
          {
            "name": "GraphQL",
            "level": "Intermediate",
            "years": 2,
            "icon": "fas fa-project-diagram"
          },
          {
            "name": "WebSocket",
            "level": "Intermediate",
            "years": 2,
            "icon": "fas fa-exchange-alt"
          },
          {
            "name": "Webhooks",
            "level": "Intermediate",
            "years": 2,
            "icon": "fas fa-network-wired"
          },
          {
            "name": "MQTT",
            "level": "Intermediate",
            "years": 1,
            "icon": "fas fa-network-wired"
          },
          {
            "name": "RabbitMQ",
            "level": "Intermediate",
            "years": 1,
            "icon": "fas fa-network-wired"
          },
          {
            "name": "OpenTelemetry",
            "level": "Basic",
            "years": 1,
            "icon": "fas fa-network-wired"
          },
          {
            "name": "Git",
            "level": "Advanced",
            "years": 3,
            "icon": "fab fa-github"
          },
          {
            "name": "GitHub",
            "level": "Advanced",
            "years": 3,
            "icon": "fab fa-github"
          },
          {
            "name": "GitLab",
            "level": "Intermediate",
            "years": 1,
            "icon": "fab fa-gitlab"
          }
        ],
        "AWS Cloud": [
          {
            "name": "Lambda",
            "level": "Intermediate",
            "years": 2,
            "icon": "fab fa-aws"
          },
          {
            "name": "API Gateway",
            "level": "Intermediate",
            "years": 2,
            "icon": "fas fa-random"
          },
          {
            "name": "Step Functions",
            "level": "Intermediate",
            "years": 2,
            "icon": "fas fa-project-diagram"
          },
          {
            "name": "SQS",
            "level": "Intermediate",
            "years": 2,
            "icon": "fas fa-envelope-open-text"
          },
          {
            "name": "SNS",
            "level": "Intermediate",
            "years": 2,
            "icon": "fas fa-bell"
          },
          {
            "name": "EC2",
            "level": "Intermediate",
            "years": 2,
            "icon": "fas fa-server"
          },
          {
            "name": "ECR",
            "level": "Intermediate",
            "years": 2,
            "icon": "fas fa-database"
          },
          {
            "name": "S3",
            "level": "Intermediate",
            "years": 2,
            "icon": "fas fa-hdd"
          },
          {
            "name": "CloudWatch",
            "level": "Intermediate",
            "years": 2,
            "icon": "fas fa-chart-line"
          },
          {
            "name": "IAM",
            "level": "Intermediate",
            "years": 2,
            "icon": "fas fa-user-shield"
          }
        ],
        "DevOps": [
          {
            "name": "Kubernetes",
            "level": "Basic",
            "years": 0,
            "icon": "fas fa-dharmachakra"
          },
          {
            "name": "NGINX",
            "level": "Intermediate",
            "years": 1,
            "icon": "fas fa-server"
          },
          {
            "name": "Bash/Shell scripting",
            "level": "Intermediate",
            "years": 2,
            "icon": "fas fa-terminal"
          },
          {
            "name": "GitHub Actions",
            "level": "Advanced",
            "years": 3,
            "icon": "fab fa-github"
          },
          {
            "name": "DigitalOcean",
            "level": "Intermediate",
            "years": 1,
            "icon": "fas fa-cloud"
          },
          {
            "name": "Docker",
            "level": "Advanced",
            "years": 3,
            "icon": "fab fa-docker"
          },
          {
            "name": "Docker Compose",
            "level": "Advanced",
            "years": 3,
            "icon": "fab fa-docker"
          }
        ],
        "Databases": [
          {
            "name": "PostgreSQL",
            "level": "Advanced",
            "years": 3,
            "icon": "fas fa-database"
          },
          {
            "name": "MongoDB",
            "level": "Intermediate",
            "years": 2,
            "icon": "fas fa-leaf"
          },
          {
            "name": "Redis",
            "level": "Intermediate",
            "years": 2,
            "icon": "fas fa-database"
          }
        ]
      }
    },
    "experiences": [
      {
        "id": "swift-hackathon-2024",
        "title": "Winners of the Swift Change Makers Hackathon 2024",
        "description": "Hackathon held in Monterrey that brought together the best teams from across Mexico, each having previously won local hackathons to earn a spot. My team and I were selected to participate and took first place in FEMSA’s challenge. During the event we developed **OXXO LINK**, an innovative solution designed to facilitate neighbor collaboration and streamline product purchases at OXXO. The project grew from an intense team effort where everyone contributed ideas that evolved into a solid and effective proposal.\n\nOur solution impressed the judges so much that they started using our coined term *los paros* to describe the project’s dynamic. Winning the FEMSA challenge was exciting and rewarding, especially given the caliber of the other teams. Competing—and prevailing—at an event of this scale is an experience I’ll always remember.",
        "date": "2024-03-15",
        "location": "Monterrey, Mexico",
        "type": "hackathon",
        "award": "1st Place",
        "media": {
          "url": "https://res.cloudinary.com/dktvzpt6a/video/upload/v1726351947/website/d2hmldjtasmrygarimjn.mp4",
          "type_resource": "video"
        },
        "tags": ["Hackathon", "FEMSA", "OXXO", "Innovation"]
      },
      {
        "id": "nasa-space-apps-2023",
        "title": "Winners of the NASA Space Apps Challenge 2023",
        "description": "The NASA Space Apps Challenge 2023 is a global hackathon inviting participants worldwide to solve science-and-space challenges using open data from NASA and its partners. In the Mexico City edition, my team **AstroFire** earned first place with our innovative proposal **“Sensores de Muerte” (Death Sensors)**. The project consisted of a network of sensors strategically placed in forest areas to detect wildfire speed and direction. The sensors communicated via LoRa, creating a local network that enabled early alerts and facilitated rapid response to forest fires. Although it was an initial prototype, we made it fully functional. We also built the hardware capturing the data plus the website and mobile app, allowing us to showcase a prototype that impressed judges with its effectiveness and potential despite being a preliminary version.",
        "date": "2023-10-07",
        "location": "Mexico City, Mexico",
        "type": "hackathon",
        "award": "1st Place",
        "media": {
          "url": "https://res.cloudinary.com/dktvzpt6a/video/upload/v1726354821/website/jjnn6tvpi2pqn5ynomyv.mp4",
          "type_resource": "video"
        },
        "tags": ["NASA", "Space", "IoT", "Environmental"]
      },
      {
        "id": "unam-telecom-talk",
        "title": "Telecommunications Congress – UNAM Faculty of Engineering",
        "description": "As part of the lecture series of the Telecommunications Department at UNAM’s Faculty of Engineering, I had the honor of being invited as a speaker by Dr. Luis Francisco García Jiménez (Communications Networks professor). During the talk I covered key topics such as the **Internet of Things**, **software development**, and some of my **open-source projects**. It was a rewarding experience to share my knowledge and passion with an audience interested in those technological fields.",
        "date": "2023-11-15",
        "location": "UNAM, Mexico City",
        "type": "conference",
        "award": null,
        "media": {
          "url": "https://res.cloudinary.com/dktvzpt6a/video/upload/v1726370258/website/mbs9zoqpmpgycc4velq9.mp4",
          "type_resource": "video"
        },
        "tags": ["IoT", "Software Development", "Open Source", "UNAM"]
      },
      {
        "id": "conaces-acapulco",
        "title": "CONACES 2023 – Acapulco",
        "description": "My friends and I had the honor of being invited as speakers at **CONACES 2023**, Mexico’s most important space event, organized by the **Mexican Space Agency**. We shared the stage with brilliant figures such as Rodolfo Neri Vela—the first Mexican astronaut—along with other experts from the space sector. Presenting our projects at an event of such magnitude was an incredible opportunity to exchange ideas and learn from leading industry voices.",
        "date": "2023-09-20",
        "location": "Acapulco, Mexico",
        "type": "conference",
        "award": null,
        "media": {
          "url": "https://res.cloudinary.com/dktvzpt6a/video/upload/v1726370338/website/bgt0ke4ryyargaehljek.mp4",
          "type_resource": "video"
        },
        "tags": ["Space", "Mexican Space Agency", "Innovation"]
      }
    ],
    "projects": [

      {
        "id": "aws_lambda_fastapi_template",
        "title": "AWS Lambda FastAPI Template",
        "description": "Professional template for building serverless REST APIs using FastAPI, Docker and AWS Lambda.",
        "long_description": "AWS Lambda FastAPI Template is a professional template designed to develop modular and scalable serverless REST APIs. It uses FastAPI as the main framework, deployed on AWS Lambda using Docker containers. It integrates modular architecture, real database testing and a complete automated CI/CD flow through GitHub Actions. The template allows defining data models with SQLAlchemy and Pydantic, supporting databases like PostgreSQL and MongoDB. Additionally, it leverages Mangum as an ASGI adapter for Lambda and supports cloud-native microservices, ideal for modern cloud-oriented projects.",
        "technologies": [
          "python",
          "testing", 
          "docker",
          "template",
          "sqlalchemy",
          "cloud",
          "microservices",
          "mongodb",
          "aws-lambda",
          "serverless",
          "rest-api",
          "postgresql",
          "ci-cd",
          "github-actions",
          "pydantic",
          "fastapi",
          "mangum"
        ],
        "category": "backend",
        "status": "Completed",
        "featured": false,
        "links": {
          "demo": null,
          "github": "https://github.com/ronihdzz/aws-lambda-fastapi-template",
          "documentation": null
        },
        "images": [],
        "date_created": "2025-06-12",
        "date_updated": "2025-06-12"
      },
      {
        "id": "aws_lambda_go",
        "title": "AWS Lambda Go",
        "description": "REST API built with Go and Gin Framework for hybrid execution in AWS Lambda.",
        "long_description": "AWS Lambda Go is a project that implements a REST API using Go language along with the Gin framework. Its architecture allows hybrid execution, where Lambda functions are used in serverless production environments, while exposing a traditional HTTP server for local development. The project uses Docker containers for function packaging, integration with API Gateway for HTTP request routing, and complete automated CI/CD flows through GitHub Actions. Additionally, it supports microservices deployment, serverless models, and cloud-native architectures under AWS.",
        "technologies": [
          "go",
          "docker",
          "golang",
          "microservices",
          "aws-lambda",
          "serverless",
          "containers",
          "api-gateway",
          "rest-api",
          "ci-cd",
          "cloud-computing",
          "gin-framework",
          "github-actions"
        ],
        "category": "backend",
        "status": "Completed",
        "featured": false,
        "links": {
          "demo": null,
          "github": "https://github.com/ronihdzz/aws-lambda-go",
          "documentation": null
        },
        "images": [],
        "date_created": "2025-06-12",
        "date_updated": "2025-06-12"
      },
      {
        "id": "voice_ai_assistant_python",
        "title": "VOICE AI Assistant Python",
        "description": "AI voice assistant for real-time phone calls, built with Python, Twilio and OpenAI Realtime API.",
        "long_description": "VOICE AI Assistant Python is a voice assistant based on artificial intelligence designed to handle real-time phone conversations. Implemented with Python and FastAPI, it uses OpenAI's Realtime API for transcription and response generation during calls, while Twilio manages call routing and handling. The system supports bidirectional audio flows, processing incoming voice and responding dynamically. Deployment is containerized with Docker, allowing a flexible environment for testing and production. This project integrates advanced conversational AI capabilities, real-time communication and phone call control.",
        "technologies": [
          "python",
          "docker",
          "real-time",
          "twilio",
          "voice-assistant",
          "conversational-ai",
          "fastapi",
          "openai-api",
          "gpt-4o"
        ],
        "category": "ai",
        "status": "Completed",
        "featured": false,
        "links": {
          "demo": null,
          "github": "https://github.com/ronihdzz/voice-ai-asistant-python",
          "documentation": null
        },
        "images": [],
        "date_created": "2025-06-12",
        "date_updated": "2025-06-12"
      },
      {
        "id": "telegram_connector",
        "title": "Telegram Connector",
        "description": "Complete solution to integrate applications with Telegram bots through bidirectional communication.",
        "long_description": "Telegram Connector is a solution designed to integrate backend applications with the Telegram bot platform, enabling real-time bidirectional communication for sending and receiving messages. Built on Python and FastAPI, it exposes REST endpoints and webhooks that handle event reception from Telegram and emission of automated or assisted responses. It uses Docker for containerization, PostgreSQL as persistence database and supports integration with modular architectures for advanced messaging systems. It's ideal as a connector microservice within multichannel platforms or CRM with messaging bot support.",
        "technologies": [
          "python",
          "api",
          "docker",
          "telegram",
          "connector",
          "integration",
          "telegram-bot",
          "rest-api",
          "webhook",
          "postgresql",
          "fastapi"
        ],
        "category": "backend",
        "status": "Completed",
        "featured": false,
        "links": {
          "demo": null,
          "github": "https://github.com/ronihdzz/telegram-connector",
          "documentation": null
        },
        "images": [],
        "date_created": "2025-06-12",
        "date_updated": "2025-06-12"
      },
      {
        "id": "cacpy",
        "title": "CACPY",
        "description": "Automatic grading tool for Python programs in Google Classroom.",
        "long_description": "CACPY is a tool developed in Python that automates the grading of programs submitted in Google Classroom. It uses PyQt5 to provide a friendly graphical interface, integrates access to Google Drive and Google Classroom for downloading, reviewing and automatic return of assignments, along with their individual feedback. Additionally, it incorporates nbgrader as an evaluation engine for Jupyter notebooks and handles mass correction flows through automation processes. It's designed as a support system for teachers, reducing manual review time and improving the efficiency of the educational process.",
        "technologies": [
          "python",
          "classroom",
          "education",
          "gui",
          "automation",
          "pyqt5",
          "google-drive",
          "nbgrader",
          "google-classroom",
          "auto-grading",
          "teacher-tools",
          "grading-tools"
        ],
        "category": "education",
        "status": "Completed",
        "featured": false,
        "links": {
          "demo": null,
          "github": "https://github.com/ronihdzz/CACPY",
          "documentation": null
        },
        "images": [],
        "date_created": "2025-06-12",
        "date_updated": "2025-06-12"
      },
      {
        "id": "opentelemetry_microservices",
        "title": "OpenTelemetry Microservices",
        "description": "Microservices in Python with distributed observability using OpenTelemetry and Jaeger.",
        "long_description": "This project implements a microservices architecture in Python aimed at calculating averages in a distributed manner. Each microservice works collaboratively leveraging parallel processing and distributed systems techniques. OpenTelemetry has been integrated for distributed tracing, allowing complete visibility of request flow through different components. Additionally, it uses Jaeger as a trace backend, offering advanced observability capabilities and facilitating detection of bottlenecks or latency issues. Service deployment and orchestration is done through Docker, and FastAPI is used as the main framework to expose the microservices APIs.",
        "technologies": [
          "Python",
          "API",
          "Docker",
          "Distributed Systems",
          "Microservices",
          "Observability",
          "Distributed Tracing",
          "Python Multiprocessing",
          "Jaeger",
          "FastAPI",
          "OpenTelemetry"
        ],
        "category": "Distributed Systems",
        "status": "Completed",
        "featured": false,
        "links": {
          "demo": null,
          "github": "https://github.com/ronihdzz/opentelemtry-microservices",
          "documentation": null
        },
        "images": [],
        "date_created": "2025-06-12",
        "date_updated": "2025-06-12"
      },
      {
        "id": "central_var_rxd",
        "title": "Central Var RXD",
        "description": "CLI for secure management of environment variables with GPG encryption and multi-environment support.",
        "long_description": "Central Var RXD is a command-line tool (CLI) developed in Python, focused on secure environment variable management. It allows handling configurations for multiple environments (development, staging, production) in an organized way, ensuring value confidentiality through GPG encryption. Additionally, it facilitates integration into DevOps and CI/CD workflows by using Makefile for automation. Thanks to its security focus, it supports centralized secrets management, secure storage, and versioning of sensitive configurations for different phases of application lifecycles.",
        "technologies": [
          "Python",
          "CLI",
          "Security",
          "DevOps",
          "Encryption",
          "Makefile",
          "GPG",
          "Environment Variables",
          "Command Line Tool",
          "Development Tools",
          "Secure Storage",
          "Secrets Management",
          "Env Management"
        ],
        "category": "Development Tools",
        "status": "Completed",
        "featured": false,
        "links": {
          "demo": null,
          "github": "https://github.com/ronihdzz/central_var_rxd",
          "documentation": null
        },
        "images": [],
        "date_created": "2025-06-12",
        "date_updated": "2025-06-12"
      },
      {
        "id": "git_archive_action",
        "title": "Git Archive Action",
        "description": "GitHub Action to persist workflow artifacts in dedicated branches within the same repository.",
        "long_description": "Git Archive Action is a GitHub Action designed to persistently store artifacts generated by continuous integration workflows, such as test coverage reports. The artifacts are saved in a dedicated Git branch within the same repository, allowing decoupling of artifact storage from the main source code history. This provides a historical and accessible record of each workflow execution's results, facilitating audits, code quality analysis and maintainability in complex CI/CD environments.",
        "technologies": [
          "Git",
          "DevOps",
          "CI/CD",
          "Artifacts",
          "Workflow Automation",
          "GitHub Actions",
          "Persist Artifacts"
        ],
        "category": "Workflow Automation",
        "status": "Completed",
        "featured": false,
        "links": {
          "demo": null,
          "github": "https://github.com/ronihdzz/git-archive-action",
          "documentation": null
        },
        "images": [],
        "date_created": "2025-06-12",
        "date_updated": "2025-06-12"
      },
      {
        "id": "push_to_dockerhub_action",
        "title": "Push to DockerHub Action",
        "description": "GitHub Action to automate versioning and deployment of images to Docker Hub with environment control.",
        "long_description": "Push to DockerHub Action is a highly configurable GitHub Action that automates the process of versioning and deploying Docker images to Docker Hub. The action allows mapping Git branches to different environments (development, staging, production), facilitating robust and controlled CI/CD workflows. It also supports creating rollback tags, which enables safely reverting versions in case of failures. Its design is oriented towards simplifying image handling, avoiding manual errors in deployment pipelines and ensuring consistency in execution environments.",
        "technologies": [
          "Docker",
          "DevOps",
          "Automation",
          "CI/CD",
          "Docker Hub",
          "GitHub Actions"
        ],
        "category": "Deployment Automation",
        "status": "Completed",
        "featured": false,
        "links": {
          "demo": null,
          "github": "https://github.com/ronihdzz/push-to-dockerhub-action",
          "documentation": null
        },
        "images": [],
        "date_created": "2025-06-12",
        "date_updated": "2025-06-12"
      },
      {
        "id": "push_to_digitalocean_action",
        "title": "Push to DigitalOcean Action",
        "description": "GitHub Action to build and publish Docker images to DigitalOcean Container Registry with environment control.",
        "long_description": "Push to DigitalOcean Action is a customizable GitHub Action designed to automate the process of building and deploying Docker images to DigitalOcean's Container Registry. It allows mapping Git branches to specific environments (development, staging, production), facilitating controlled versioning and deployment strategies. Additionally, it supports generating rollback tags for easily reverting versions in case of failures. This action is ideal for CI/CD pipelines seeking seamless integration with DigitalOcean infrastructure, reducing manual intervention and improving container deployment reliability.",
        "technologies": [
          "Docker",
          "DigitalOcean",
          "DevOps",
          "Automation",
          "CI/CD",
          "Container Registry",
          "GitHub Actions"
        ],
        "category": "Deployment Automation",
        "status": "Completed",
        "featured": false,
        "links": {
          "demo": null,
          "github": "https://github.com/ronihdzz/push-to-digitalocean-action",
          "documentation": null
        },
        "images": [],
        "date_created": "2025-06-12",
        "date_updated": "2025-06-12"
      },
      {
        "id": "git_archive_action_testing_example",
        "title": "Git Archive Action Testing Example",
        "description": "Practical example of CI/CD integrating multiple services and artifact storage with Git Archive Action.",
        "long_description": "Git Archive Action Testing Example is a demonstration repository that realistically integrates a complete CI/CD flow. It runs integration tests against multiple services (PostgreSQL, MongoDB, Redis) raised within a Docker container, generating automated test coverage reports. Finally, it uses the 'git-archive-action' GitHub Action to persistently store these test artifacts within dedicated repository branches. This example allows visualizing the combined use of testing tools, pipeline automation and historical report storage within a distributed service environment.",
        "technologies": [
          "Testing",
          "Docker",
          "Redis",
          "DevOps",
          "Demo",
          "MongoDB",
          "Example",
          "PostgreSQL",
          "CI/CD",
          "GitHub Actions"
        ],
        "category": "Workflow Automation",
        "status": "Completed",
        "featured": false,
        "links": {
          "demo": null,
          "github": "https://github.com/ronihdzz/git-archive-action-testing-example",
          "documentation": null
        },
        "images": [],
        "date_created": "2025-06-12",
        "date_updated": "2025-06-12"
      },
      {
        "id": "roni_website",
        "title": "Roni Website",
        "description": "Personal website built with FastHTML and modern responsive design.",
        "long_description": "Roni Website is a personal website developed using the FastHTML framework, which allows a modular and efficient structure for creating web pages. The project implements a fully responsive design, optimized for different devices, and integrates organized sections to showcase professional experiences, technical skills, completed projects and a contact form. Additionally, it employs advanced CSS animations to enhance visual experience and user interaction. The solution combines technologies such as JavaScript, Python, HTML5, CSS3 and FastHTML, offering a professional and modern deployment ideal for personal portfolios.",
        "technologies": [
          "JavaScript",
          "Python",
          "HTML5",
          "CSS3",
          "FastHTML"
        ],
        "category": "portfolio-website",
        "status": "Completed",
        "featured": false,
        "links": {
          "demo": "https://ronihdz.com/",
          "github": "https://github.com/ronihdzz/roni-website",
          "documentation": null
        },
        "images": [],
        "date_created": "2025-06-13",
        "date_updated": "2025-06-13"
      },
      {
        "id": "web_personal_django",
        "title": "Personal Web Django",
        "description": "Complete personal website developed in Django with portfolio, blog and automatic contact system.",
        "long_description": "Personal Web Django is a professionally developed personal website using the Django framework. The application includes a professional portfolio to showcase projects and certifications, a personal blog to publish articles and work experiences, as well as an automated contact system that facilitates communication with visitors. Additionally, it features a complete Django admin panel for managing dynamic content, posts, contact forms and data administration. The deployment is done on PythonAnywhere and uses technologies such as Python, MySQL, Django, HTML, CSS, email automation and responsive web design, offering an organized, professional and easily maintainable experience.",
        "technologies": [
          "Python",
          "Django",
          "MySQL",
          "HTML",
          "CSS",
          "PythonAnywhere",
          "Email Automation"
        ],
        "category": "portfolio-website",
        "status": "Completed",
        "featured": false,
        "links": {
          "github": "https://github.com/ronihdzz/web-personal-django",
          "documentation": null
        },
        "images": [],
        "date_created": "2025-06-13",
        "date_updated": "2025-06-13"
      },
      {
        "id": "simon_dice_troni",
        "title": "Simon Says Troni",
        "description": "Simon Says memory game with Arduino, LEDs, buttons and sound.",
        "long_description": "Simon Says Troni is an interactive recreation of the classic Simon Says game, programmed in C for an Arduino UNO board. The system uses four colored LEDs and four push buttons to display and capture the light sequences that the user must memorize and repeat. It incorporates a piezoelectric buzzer with volume control for sound effects and reward melodies when completing levels. The firmware implements pseudorandom sequence generation, various scalable difficulty levels and serial communication for debugging or external monitoring from a serial monitor. This project demonstrates physical computing concepts, digital I/O handling, non-blocking timing and embedded game design, being ideal for educational purposes in electronics and IoT.",
        "technologies": [
          "C",
          "Arduino",
          "LEDs",
          "Push buttons",
          "Piezoelectric buzzer",
          "Serial communication",
          "Electronics",
          "Embedded systems"
        ],
        "category": "Physical Computing and IoT",
        "status": "Completed",
        "featured": false,
        "links": {
          "demo": null,
          "github": "https://github.com/ronihdzz/simon-dice-troni",
          "documentation": null
        },
        "images": [],
        "date_created": "2025-06-13",
        "date_updated": "2025-06-13"
      },
      {
        "id": "iot_domotica",
        "title": "IoT Home Automation",
        "description": "Home automation system with Raspberry Pi, PyQt5 and microcontrollers.",
        "long_description": "IoT Home Automation is a home control and monitoring platform based on Raspberry Pi with a desktop graphical interface developed in PyQt5. It allows turning on and adjusting RGB lighting, activating a fan, detecting fires through flame sensors, programming alarms and managing tasks from an intuitive GUI. The system communicates with Arduino and ESP-32 microcontrollers through serial ports and/or Wi-Fi to operate external peripherals, while the Raspberry Pi orchestrates business logic, event cron and state logging. The application demonstrates hardware and software integration in IoT environments, GPIO handling, serial communication and wireless networks, as well as responsive user interface design for home automation.",
        "technologies": [
          "Python",
          "PyQt5",
          "Raspberry Pi",
          "Arduino",
          "ESP-32",
          "GPIO",
          "RGB LEDs",
          "Flame sensors",
          "IoT"
        ],
        "category": "Home Automation and IoT",
        "status": "Completed",
        "featured": false,
        "links": {
          "demo": null,
          "github": "https://github.com/ronihdzz/IoT_domotica",
          "documentation": null
        },
        "images": [],
        "date_created": "2025-06-13",
        "date_updated": "2025-06-13"
      },
      {
        "id": "metro_maps_cdmx",
        "title": "Metro Maps CDMX",
        "description": "Desktop application that displays the entire Mexico City Metro network and calculates the shortest route between stations.",
        "long_description": "Metro Maps CDMX is a desktop application developed in Python 3 with PyQt5 for the graphical interface. It models the complete network of Mexico City's Metro Public Transportation System using NetworkX, representing each station as a node and sections as weighted edges. It implements shortest path search algorithms (Dijkstra and A*) to determine the optimal route between two stations, considering transfers and distances. It adopts a client-server architecture: the GUI sends calculation requests to the server via sockets and receives the resulting route to render it on an interactive canvas. This decoupled flow facilitates testing, maintenance and possible distributed deployments. The project serves as an educational tool in graph algorithms and as support for urban travel planning, and can run on Windows, macOS and Linux without external dependencies apart from Python and the mentioned libraries.",
        "technologies": [
          "Python 3",
          "PyQt5",
          "NetworkX",
          "Dijkstra Algorithm",
          "A* Algorithm",
          "TCP/IP Sockets"
        ],
        "category": "Transport and Mobility",
        "status": "Completed",
        "featured": false,
        "links": {
          "demo": null,
          "github": "https://github.com/ronihdzz/metro-maps-cdmx",
          "documentation": null
        },
        "images": [],
        "date_created": "2025-06-13",
        "date_updated": "2025-06-13"
      },
      {
        "id": "circuirtos_rf_punto_q",
        "title": "RF Circuits Q Point",
        "description": "Educational tool for finding the Q operating point of FET transistors (JFET and MOSFET) with different methods.",
        "long_description": "RF Circuits Q Point is an educational tool developed in Python, designed to calculate the Q operating point of field-effect transistors (FET), including JFET and MOSFET, under various bias configurations. The application implements multiple analysis methods: iterative, analytical and graphical, allowing the study and comparison of results in different electronic design scenarios. The workflow is built on Jupyter notebooks, where detailed examples, numerical explanations, analytical solutions and interactive graphical representations are included. It's ideal for electronic engineering students and professionals looking to understand bias circuit behavior, RF analysis, and transistor design optimization in educational and electronic simulation applications.",
        "technologies": [
          "Python",
          "Jupyter Notebook",
          "Numerical methods",
          "Circuit analysis",
          "Graphical analysis",
          "Electronic engineering"
        ],
        "category": "Education and Electronic Simulation",
        "status": "Completed",
        "featured": false,
        "links": {
          "demo": null,
          "github": "https://github.com/ronihdzz/Circuitos-RF-punto-Q",
          "documentation": null
        },
        "images": [],
        "date_created": "2025-06-13",
        "date_updated": "2025-06-13"
      }









    ],
    "meta": {
      "version": "2.0",
      "last_updated": "2024-01-20",
      "sections_enabled": {
        "about": true,
        "skills": true,
        "projects": true,
        "experiences": true,
        "work_experience": true,
        "education": true,
        "contact": true
      },
      "seo": {
        "keywords": ["full-stack developer", "web developer", "React", "Node.js", "Python", "JavaScript", "freelance", "portfolio"],
        "description": "Ronaldo Hernández – Full-stack Developer specializing in modern web applications with React, Node.js, and Python. Available for freelance projects and collaborations."
      }
    }
  }
  